<Project Sdk="Microsoft.NET.Sdk">
  <PropertyGroup>
    <TargetFramework>net8.0-ios</TargetFramework>
    <Nullable>enable</Nullable>
    <ImplicitUsings>true</ImplicitUsings>
    <IsBindingProject>true</IsBindingProject>
    <Company>Cobrowse.io LLC</Company>
    <Version>2.33.2</Version>
    <Title>Cobrowse.IO.iOS.AppExtension</Title>
    <Product>Cobrowse.IO.iOS.AppExtension</Product>
    <RootNamespace>Cobrowse.IO.iOS.AppExtension</RootNamespace>
    <AssemblyName>Cobrowse.IO.iOS.AppExtension</AssemblyName>
    <Description>Cobrowse.io - .NET iOS Broadcast Extension</Description>
  </PropertyGroup>

  <ItemGroup>
    <ObjcBindingApiDefinition Include="ApiDefinition.cs" />
    <ObjcBindingCoreSource Include="StructsAndEnums.cs" />
  </ItemGroup>

  <ItemGroup>
    <NativeReference Include="..\..\cobrowse-sdk-ios-binary\CobrowseIOAppExtension.xcframework">
      <Kind>Framework</Kind>
      <SmartLink>False</SmartLink>
    </NativeReference>
    <!--
    Rather misteriously, referencing the extension framework only leads to a situation when .NET
    does not generate `Cobrowse.IO.iOS.AppExtension.resources.zip` file.
    Instead, it only generates a `Cobrowse.IO.iOS.AppExtension.resources` folder with the extension
    XCFramework content. However, this directory is not being picked up when referencing
    the broadcast extension library via a NuGet package.
    The simplest way to force .NET to generate a ZIP file is to add the main XCFramework
    as a second dependency.
    -->
    <NativeReference Include="..\..\cobrowse-sdk-ios-binary\CobrowseIO.xcframework">
      <Kind>Framework</Kind>
      <SmartLink>False</SmartLink>
    </NativeReference>
  </ItemGroup>
</Project>
